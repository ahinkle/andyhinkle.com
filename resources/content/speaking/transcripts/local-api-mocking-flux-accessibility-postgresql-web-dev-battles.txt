Andy Hinkle (00:01)
Welcome to another episode of The Midwest Artisan. I'm your host Andy Hinkle, and with me...

Dalton McCleery (00:07)
And I'm your co -host, Dalton McCleery

Andy Hinkle (00:10)
Sorry, sorry, cut, yeah. So we are both from the Midwest, United States, and we love talking about Laravel, web development, and anything else happening that's fun and interesting. We talk a lot about some of the things we face at work, like interesting concepts, interesting problems, and anything, yeah, like I said, anything else that's happening. So Dalton, how was your week?

Dalton McCleery (00:34)
My week has been incredibly busy with the project X that we talked about last time. And I'm happy to say that my late night workings has gone down. I'm actually getting close and I feel like I can sleep like a normal human again. Into a better spot. What about you? How's your week been?

Andy Hinkle (00:53)
Getting some better sleep, that's good, yeah.

Yeah, yeah, it's been slow. It's been really good. still coming off Laracon I feel like, but it has been slower at work. We're just trying to get things aligned. Usually our quarter four or like towards Christmas time, especially with e -commerce, that kind of stuff, it's a bit busier. Now it's just kind of a slower time. It's a good time to kind of look through processes and stuff like that. So I've been doing a lot of that. Been looking into...

Dalton McCleery (01:21)
Mm

Andy Hinkle (01:25)
RailsConf or RailsWorld, whatever the conference they have. Yeah, and then there's an interview that DHH did with Primegen not too long ago, and it really just got me thinking about Rails. And so I was just looking into their ecosystem, just understanding how it works in comparison to Laravels, since I'm just so ingrained in that system. And they had some cool stuff over that active record. And yeah, it's pretty cool. So yeah, like I said, it's been...

Dalton McCleery (01:29)
So the Ruby.

Hmm.

Andy Hinkle (01:52)
It's been slower, but just a good time to do some professional development. just do a 30 ,000 foot view and see if we can improve anything. So it's been good.

Dalton McCleery (02:01)
You're not gonna change into like a Rails developer now, are you? You're not gonna leave me. And the Laravel. Okay.

Andy Hinkle (02:06)
I'm partial to Laravel now. Yeah, that they have they have some great concepts and yeah, it's really cool.

Dalton McCleery (02:13)
to cement your your Laravel stuff, I think we should get like a joint tattoo of the Laravel logo I think we've talked about that a few times. I think we have to I'll come down to visit you and I'll take you to the tattoo place

Andy Hinkle (02:20)
Yeah, yeah, yeah Yeah, I yeah, I think I think my pale and just being that just a light complexion I just would not look good with tattoos but yeah, I think if I had a tattoo it would be one of my either favorite bands or Laravel because it's really changed my life and you know I've been in it for ten years now and I've been so thankful coming from

where worked just at a theme park being a ride operator. got to tell that story sometime, but when I used to just be a ride operator, I moved up to management, learned how to build Laravel apps. changed my world. yeah, we get Laravel matching Laravel tattoos.

Dalton McCleery (02:54)
You should. You should. mean, get one right here, get you the little Laravel L, and then on this side you could put Metallica or... I even saw tattoos of people's like, Git histories, like that GitHub chart of the little dots of... I've seen people get tattoos of that. I don't know, tattoos are on my brain, and I kind of want a Laravel tattoo. I'm gonna come visit you for Christmas.

Andy Hinkle (03:03)
Yeah

yeah.

Hmm, yeah.

You ever see those like, I'll be good. You ever see those like ones where it's just like, like programmers will have it. It's like head, but then at the back of their neck, has like a closed tag, like end head. Like you got your head and then closed tag head. Yeah. Or just like a open bracket. Yeah. And then it's like, you have your head and then close. But yeah, that's kind of silly, but kind of cool, unique, different, you know? So yeah. Cool man. So did you.

Dalton McCleery (03:28)
like a detached? That's very clever.

That's very clever.

I'll take you. I'll take you one day. I'll take you.

Andy Hinkle (03:44)
Love that. Yeah My wife will not approve of this by the way, so I'm sorry Lauren if you're listening I I'm not getting a tattoo. Yeah, not getting a tattoo not yet. Yeah So did you see Caleb this morning? He he launched flux dude. I Yeah It was so good. It's like a three -hour Livestream completely unfiltered. It was just good to see those

Dalton McCleery (03:48)
That's alright, she doesn't have to know.

Not yet, Lauren.

Yeah, I was watching that livestream on Twitter.

You

There was a couple of spicy takes.

Andy Hinkle (04:11)
those three in there. Aaron was at Starbucks because his power went out. I felt, yep, which they're making the joke about, doesn't Texas have bad power problems? You know, like the ice storm. So it was really cool to see that launch. And with that.

Dalton McCleery (04:20)
and Starbucks Power was out.

Yeah.

Andy Hinkle (04:34)
With Caleb's all of his hard work, he changed his pricing model to kind of fit either one or unlimited projects. And I think it's a really good fit. I was a little nervous about posting it. I shared it with like a few Telegram groups because not a lot of people were talking about it yet. And I was like, you guys remember Flux? Check this out. You know, they changed it. Now it's released. Come check it out. And so I shared on Telegram group groups. And then I was like, should I share it on Reddit? Because I remember the last time

Dalton McCleery (04:38)
Yes.

Andy Hinkle (05:02)
that was posted on Reddit. So full disclosure, I've shared this on the show before, but I am unfortunately a moderator on the Laravel subreddit. And so this is something I picked up a couple of years ago and hoping to clean it up. And I felt like we have cleaned up the place quite a bit, but it's just unbelievably toxic when you can be more of an anonymous figure on a place like Reddit. But anywho, it was very toxic the first time it was posted on like...

Dalton McCleery (05:08)
you

Andy Hinkle (05:29)
maybe this will change it, you know, it is. And it's not as bad this time. There are a few folks like, my gosh, money, I have to use that to use this thing. or, but what, you know, what people don't realize is that just by, you know, it's like what, $250 for unlimited projects. That's like one or two hours of my time as a developer. And you have unlimited projects and it's forever. Like you pay for it once and it's forever. And so then.

that just saves so much time just by, you you don't have to write these components over and over. And it's professionally written by the LiveWire maintainer himself, which is fantastic.

if LiveWire updates, I know that's up to speed. I don't have to update all these little components that I have written over the years. I just do a composer update. And so it's a no -brainer for me, but some other people are like,

money and or they say it's a Tailwind UI you  rip off and but the overall I remember last time I was at Laracon and I was constantly I saw I I get a notification on my phone if like somebody reports something you know to go check it out and I've only gotten a couple today but Laracon man it was just like blowing up people are so unbelievably toxic but this morning it hasn't been too bad of only I think we've

I say it's not too bad, we've only banned three people. People are just like, this is just a money grab We've already warned them before on different stuff, we don't want you here. So just take your toxicity somewhere else. Take it to the PHP subreddit. Love Flux, very excited about it. I wanna get your take. You watched the live stream.

Dalton McCleery (06:51)
yeah, yeah, only three.

Yeah, yeah, yeah, yeah.

Andy Hinkle (07:13)
But what are you thinking?

Dalton McCleery (07:16)
Yeah, as someone who's about to launch a paid product of not of this nature, a paid helper package, essentially, I mean, I don't really have a problem spending a couple hundred dollars if it's going to save me like legit save me hours of my time. Like all about just trying to like, especially if it's something freelance related or we're not agency related. If it's going to save me an hour, that's an hour that I don't have to spend building.

myself and then now I've got to write tests for it and I gotta make sure that that doesn't break and it's just like this this nasty spiral. So I don't have a problem with the pricing. I don't have a problem with them charging stuff like I think he said in that live stream that people were saying, yeah, I would pay you $500 to have a one time unlimited projects. And it looks like that's what he has. It's just on like a launch discount for 280. But I mean, even then 280 is like two hours of my time. I'd happily spend that money to

never have to worry about any of that stuff again. But I'm yeah, I don't see, I don't see the hate for it. think Caleb Porzio's proven himself to be a good developer. Like you're not getting crap here.

And I don't see the tailwind competition. You could use tailwind to make this stuff look better, but at the end of the day, is like, it is a component library. There's like 700 of them available. You take your pick, there's a couple free ones. But I'd rather pay the money to get one from a creator that I know does good work and will support it than some random one that I found off the internet that, I don't know.

doesn't do half the things that this one does, like all of the right clicks and the drop downs and making sure that, you know, auto resizing text boxes and stuff like that. Like if he's thought about it, then I don't have to think about Sort of an easy sell for me. If that makes sense.

Andy Hinkle (09:06)
Right. Yeah, absolutely. Yeah, I've been working with some of our executive partners and our agency and right now we just don't. It's one of those things of like, yeah, we'd like to include it, but it'll be on a Greenfield project Like I mentioned, we don't have a lot of those going on right now.

I was telling them, and I actually, after I wrote it, I've messaged Caleb that he should be kind of pushing this a little bit further, one thing that's not talked about enough and that's the accessibility benefits. so all of these are accessible by default. He's really thought about the accessibility sides of being able to keyboard navigate through these things. And,

Dalton McCleery (09:35)
Yeah.

Andy Hinkle (09:43)
he's been working with other people to make sure that they're accessible. And so I think by hitting that more like at least what the business is, it's really kind of a hard sell to non -technical people like there are executive executives, kind of technical, but.

it's like kind of a hard sell, like, we had this component UI library wanting to purchase and it's kind of a weird thing. so I think by, Tailwind UI was, that was kind of tricky for me to sell them. Yeah, but I had to sell them on that too. was like, well, it's a component UI library and it cuts out some work for us. so, but then it's kind of the same thing. Well, it's a component UI library. then like, well, isn't Tailwind UI a component UI library is like, yeah, this one's different, but then for LiveWire, which yeah, so there's a whole thing.

Dalton McCleery (10:06)
Easy. really?

Andy Hinkle (10:25)
But then I the part I was like these are accessible ready components and then that's just like in and so in our industry right now We're seeing a lot. This hasn't happened to us, but we see it quite often of where Companies are getting sued for not being accessible on the website So this is really big for a lot of company owners and so I was telling Caleb I was like and you should really push that a little bit more just like somewhere just make a little bit more flashy about accessible components somewhere in the wording because

Dalton McCleery (10:30)
Mm -hmm.

Andy Hinkle (10:53)
feel like for non -technical people, that's what they like to hear. I'm really excited for Caleb. He kind of hinted at some of the numbers. He seems to be doing pretty well so far on some of the release numbers.

Dalton McCleery (11:08)
Mm -hmm. Mm -hmm. Yeah, I kind of even sympathize with him that he what did he say in the last? was like last night or like the night before that he was just Updating his like terms and service or his privacy policy. That's literally what I'm doing right now Like I feel that a hundred percent like that's the last thing on my list is to is to do it terms and service

Andy Hinkle (11:23)
Mm

in the live stream, he was talking about, with Ian, he was talking about the whole thing. So Ian was like very legalistic of like, you know, we need to, we need to stick by the rules, by the laws. and it's kind of tricky to get like developer seats. If you like going to like Facebook or, just a large company and say, Hey, we need.

Dalton McCleery (11:36)
Yes.

Andy Hinkle (11:48)
300 seats is kind of difficult to organize those about the in the legality behind it. It's just like, you know, should you just buy a master seat and then everyone uses that same login. because it's just easier to share that login. And he's and Caleb kind of whispered, that's what most people do. So but it just kind of kind of a weird thing that it's kind of get people to sign off on is the whole seat selling.

Dalton McCleery (11:57)
Mm

Andy Hinkle (12:11)
It's kind of difficult and pricing is always just difficult, but yeah, it's just kind of tricky, like selling seats and then with somebody leaves and then you have to make sure you revoke that license and stuff. So, I was thinking it'd be kind of a cool product to see of like, there might be already something out there, but it might be a cool product to see like a kind of a license management across apps. Like you can revoke. Like if somebody leaves your company or somebody's joining in, you could just click a button and it goes across all of your stuff and says, there are license for.

Dalton McCleery (12:15)
Mm

Andy Hinkle (12:42)
Google suite for Photoshop Adobe, all that is just like we took care of it, you know, because I know I'm sure that for business owners and people that probably takes a good, you know, at least a couple hours to, to make sure you go through it and you have to create like you have to make, you have to look through, make sure and verify everything.

Dalton McCleery (12:59)
That's not a bad idea. That kind of sounds like what some of those like money apps like I don't want to name drop anything but like all will we automatically cancel Disney Plus because you haven't like logged in and in a month or something like that. It sounds very reminiscent of something of that nature. But yeah, I think a good like agency push for flux would be right up Caleb's alley, especially for that accessibility like like Andy was saying.

Andy Hinkle (13:04)
Mm.

That's cool. Yeah.

Dalton McCleery (13:28)
I mean, it's insane the amount of work you have to do to make something accessible. And I think he released a video on Twitter of him using something or going through all of the docs just using a keyboard and no mouse, which is really hard to do and it takes time. So again, $280 right now, launch discount to save you all of that time. Buy it, please. And Caleb, can we have a referral bonus? Thank you.

Andy Hinkle (13:50)
Yeah, for sure.

Yeah, Ian was like use code Ian. And so I was like, should I try that? Should I see if that works? But obviously, yeah.

Dalton McCleery (13:58)
Yeah, yeah.

Hey, I'm gonna try it right now.

Andy Hinkle (14:05)
I'm really curious what, in the beginning, they're having some stream issues cause Caleb wanted it to be on his Twitter and Ian was just like, give me your password. And so he handed it over his password and apparently the password's hilarious. He's just like, I made it when I was a teenager or something. So got a good old password sharing is always really good, but it was such an entertaining live stream. It's like a good solid three hours. Just, it was a good way to start, start the week here. So.

Dalton McCleery (14:30)
I'll say it again that if Caleb and no offense to Ian, but if Caleb and Aaron made a podcast together, I would watch it every single week. I would watch it on YouTube. I would then restream it again on Spotify. Apple, you just tell me where to listen to it I will listen to it again. No offense.

Andy Hinkle (14:38)
Yeah.

And then when they're all three together, it's always gold.

Dalton McCleery (14:47)
Yeah, you always get Papa Ian and then the two sort of chaotic left and chaotic right.

Andy Hinkle (14:54)
Yeah, they like to, yeah, it's

Dalton McCleery (14:55)
It was really entertaining to watch. I liked it a lot.

Andy Hinkle (15:00)
So, I wanted to talk about local API mocking and testing. has come about more and more recently. there was a tweet recently by Jason Beggs, which now he works at Laravel. And he also listens to the show, or at least he listened to one episode and he reached out and

he gave me some tips on AB testing. So thank you for that, Jason. but he tweeted that for Laravel Cloud that they have been using these fake drivers and like a fake database driver. And so there was some conversation that got started about like, when you fake to these services, you know, when you're developing, local and you click like start, you click a button to like start something up and if asked to connect to a service.

You have to wait for that thing to spin up and ready. And sometimes that can take many minutes or, or in the sense of Laravel Cloud 60 seconds or less, but that might be too much effort developer. I was like, well, here we go at the wait till this thing spins up. But so what they're doing is that they are faking those responses that I imagine they're like giving a fake delay of like 3 seconds and then returning a JSON response of what they expect it would look like, or something to that effect.

This got me into thinking of, I worked on this many months ago. I was dealing with the same thing or something kind of similar. I was working on an app where people can register warranties on a product. Like you buy a product in a store or whatever, you go online, register your warranties. So it's a Laravel app and then when you register the warranty, goes to their like internal third party.

API and checks in with them and just had, Hey, this person with this email address registered, here's the information, right? And just comes back and gives you a thumbs up. but when checking with that API, sometimes it can be slow. It's their own internal API, but that's just one example. But there's been other times too, where I've been wanting to integrate with Stripe or some just third party of getting information.

It would just take a while. Developing locally, Just trying to, when you're trying to push their feature, like, I'll have to wait for this thing to actually connect to the service. So what I did was I mocked an API of when you're on local, when you hit this, it has a little half second delay. Then you get the JSON response back just to kind of mock that response or fake out that response back.

Dalton McCleery (16:59)
Thank

Andy Hinkle (17:21)
it's kind of scary because you're not actually touching that API, if that makes sense. So am I making sense? I catching my own throne so far? so, okay. And so I've been doing this just with a lot of things lately and it's been so nice of just mocking it out, but it was a little scary. Like if that...

Dalton McCleery (17:25)
Mm -hmm. Mm -hmm. Yep. I'm catching everything. I got it.

Andy Hinkle (17:40)
if that schema ever changes or those responses ever changes, I have heavy logging behind, logging behind off the exceptions if it's not the proper, you know, keys and format if we're missing a key, But mocking out those responses is such a unique concept. And I feel like

I haven't really heard anyone talking about it except for in that tweet. And then in that tweet, then like I said, I developed this many months ago. right before Laracon Jacob Bennett and Michael Dyrynda they have a podcast, it's called North Meets South, great show by the way. Highly recommend listening to that.

They were talking about it, similar things. I was like, wait a minute. I was like, so I'm not crazy with this. Cause when I did it, I thought about sharing about how to imposter syndrome. Like, this is kind of stupid. Like maybe, maybe this is a bad idea because there are pros and cons. And that's what I want to talk about. I get you're taking some of the pros and cons here in a minute, but yeah, they started talking about on the show and they're like, talking about how they do it, And then they're like, we need to do a show on this. And so.

Dalton McCleery (18:18)
you

Andy Hinkle (18:36)
I'm really excited to listen to the show. They're going to talk with Jason Beggs, which he'll talk about how they mock their API responses. I'm curious, maybe this could be a Laravel package. It's kind of tricky, right? Maybe it can be into Core. But then there's pros and cons. And I'd like to talk with you about that.

Dalton McCleery (18:51)
Mm -hmm.

Andy Hinkle (18:54)
there's a lot of pros and cons to this. And recently I was on a flight and I was developing a feature and I reloaded the page and it hits a third party API. And of course I can't get it on the plane. But in my head I was thinking if I fake that, it would be a lot easier. And I was like, I'm gonna have to worry about it. And it would.

I would continue down my path instead. Now I have to go like mock this thing out just to see if it works. I was like, well, I could just wait to get off the, you know, but besides the point, it was just, it was just one of those things where it got me thinking like we should do this more of mocking at the. So there's pros and cons. Like I said, you have, you're actually faking the response for pro. You don't have to worry about it locally. And then also when you, when you're writing your tests, you don't have to write the, the HTTP fake again. You just, one time you wrote it, it's there because when your test we hit hits it, it's going to go to that container and.

Dalton McCleery (19:41)
Thank

Andy Hinkle (19:41)
it's faked out over here. It is scary, right? Cause even the Laravel docs say to actually hit the Stripe sandbox API, sometimes depending on a platform, we don't have those sandbox API. So cause curious of your take here so far giving you a lot. So apologize if you got anything, haven't got to talk yet.

Dalton McCleery (19:59)
That was actually what I was going to bring up is Stripe. Because I remember it was, it's been several years ago, were developing a site that had a lot of algorithmic stuff, like you could put in your preferences and this algorithm would spit out a Stripe product that would fit your preferences. The problem is that algorithm had like a possible two to 300 outputs, there were 200, 300 products that you could possibly get.

Andy Hinkle (20:01)
Okay.

Dalton McCleery (20:28)
And so when we wrote tests for it, basically creating the product in Stripe, mocking all of the preferences and stuff to make sure that you return that specific product from Stripe. And of course our test suite, which it's not mocked now, it takes like 15 minutes to run and like 200, 300 of those tests are creating products, running the test and then deleting the product off Stripe. takes forever. It was also a nightmare to write those tests for that reason. I wish I should have mocked it, but again, like

Andy Hinkle (20:50)
Mm -hmm.

Dalton McCleery (20:58)
like the stripe cashier documents or documentation says, we recommend you just hit the sandbox stuff. Like I don't really need all of the stripe goodness. I just need to know, does this product ID match the one that I'm expecting it to match? So in that instance, I would 100 % mock literally everything. I think our test suite would go from 15 minutes for like three, which not a bad idea. I might actually make an issue to do that, but.

Most, most of like the popular APIs that I use have documentation that has like an output example. Like here's, here's a response that you can expect from this. So I think if, if the API that you're using is going to have that kind of documentation, I don't see why you wouldn't sort of mock it, especially while you're building out a page or just trying to say, you know, let me get my happy path.

And then once I get my happy path, maybe there's an error that happens along the way and I get a different response. I can just mock that response. And now it's much easier to write your tests. So I'm kind of all for this. I don't see very many negatives. Like what kind of cons are you thinking of that could happen?

Andy Hinkle (22:11)
Yeah, the, if the schema changes that that's kind of scary. it causes you as a developer to write a ton of exception handling of like, if anything goes wrong, just throw an exception because you you know, did you look in a Sentry and find out, this API, I'm not getting the right thing.

Did as a developer, that's where my mindset is like, it's hard to debug that. So the schema changed, right? And then, but my local copy is set up to mock everything. And so then I have to like somehow turn that off and then actually hit the API to see what the actual response is. it's super tricky to like, yeah, they have to turn it off and turn it back on again, just to figure out what that schema changes. And those don't happen too often, but they,

it's usually with kind of crappier services as a developer, it's so that it's that when you get the API and hitting it for the first time, it's just so scary. And some ways it's just like, when you have the documentation in front of you, like, hit this API. And then it's like, in my head, I'm like, okay, should I go ahead and fake this or should I go ahead and just make sure it works first?

Okay, I'm gonna go ahead and make sure it works first. Okay, now that it's working, I'm go ahead and fake it. But then it's like, well, it's in production, I need to test it again. But yeah, it just as a developer, the mindset for me is if I need to continue development on it, maybe there's a new, or perhaps I didn't get the mock correct and it's it's getting something else like.

Dalton McCleery (23:41)
Mmm

Andy Hinkle (23:43)
you know, between like a get and a post request, that can be kind of tricky. Maybe you didn't code the mock right. And then once in production, the worst thing is when it's finally in production, it's like you get the wrong thing than the, then the documentation says or something. So, cause I'm trying to, my basic thing is I'm trying to cut out work as far as a developer experience needed. And I, I'm not sure if that kind of mesh as well, but then something when you're working on a product like Laravel cloud, when

Dalton McCleery (23:44)
Hmm.

Andy Hinkle (24:10)
seconds matter and you're spending 30 seconds waiting on this thing to compile also you're probably since they're working with AWS you're probably spending money just to turn this thing off and on and so Yeah, that's just where my mind goes, but it is kind of nice in certain situations I feel like it's something that can be utilized more

Dalton McCleery (24:23)
Thank you.

Andy Hinkle (24:30)
And I like to see maybe a package out of it or something. So one thing I wanted to touch on was actual implementation.

And because there's so many ways you can do it, if I were to do it, like the way I do it today is just through a service container of like when the level app boots up, just immediately hits like HTTP, like prevent stray requests, you know, just for local. But anytime I have like the condition, like if it's not production, do this, that just smells so weird.

Dalton McCleery (25:03)
Yeah, it always smells bad.

Andy Hinkle (25:06)
So yeah, there's just some weird abstractions I put in there that just didn't feel right. And I think that's where my, when I originally wrote this, my imposter syndrome set it. I'm like, like, it just smells wrong. Like the right, like if it's not production, do this. But, but then again, you do it and like app blade, you know, like when you're including like a analytics platform, you don't want to run it in production. So you just write the production. And so I guess it, I guess it's all right. So, but anywho, yeah, I'm excited to hear more. Yeah.

Dalton McCleery (25:24)
No.

production.

There's some weird gray area. I think there's at least a good package here. As you were talking, I mean, hitting the production API or a sandbox API that first time is like, okay, everything works. This is what I'm gonna get. I can sort of build my mock off of this sort of response.

Andy Hinkle (25:38)
Mm

Dalton McCleery (25:53)
And I thought of Pest PHP, how they do their snapshot testing. So I wonder if there's like a package that sort of snapshots that first, like API response and then sort of just caches it. And then the next few like actual calls will just return that cache response instead of hitting the API.

Andy Hinkle (26:00)
Ooh, man.

man, you got my wheels turning. Like, yeah. Ooh, that's a good one. Am I hacking something?

Dalton McCleery (26:14)
All do we need to stop recording so you can start coding? I think there's definitely something here that I think can fit that sort of middle ground of, you should always try to hit the API as much as you can, just because. And I don't want to hit it every single time. that's just a, that's wasting time at that point or wasting resources. So yeah, there's a way to just sort of like, hey.

Take a snapshot of this API request and cache it for today. I'm going work on this feature today. I'm going to be hitting this several times. I'm sort of building out a dashboard. And I need to get billing information so I can put a little widget saying, your next payment's at this date, and it's going to be this much. And now I have to call Stripe every single time for that. And then I'm building my UI out. Maybe just go ahead and snapshot that and cache it so I don't have to call it 700 times today while I'm building this page out.

I mean, that's a lot easier than trying to build the mock yourself. then again, I'm thinking of Pest, PHP, how they do their snapshot. You just sort of run a command that's like, re -snapshot, delete the cache, re -snapshot for me.

Andy Hinkle (27:19)
Dude.

Mm -hmm. You got my wheels really turning because now I'm thinking about factories like if you can take a snapshot, right and the response comes back and it's like hey, there's an integer here a number Would you like that to be a fake, you know factory? man So my wheels are turning out like should this be kind of including the Laravel factory pattern where it's including all these fake things from Laravel factory there's a lot of potential here and

Dalton McCleery (27:33)
yeah.

So see you there.

I there's something, I think you get something for everybody at least, or hey, put a config value of I'm gonna snapshot this for a week, or I'm gonna use this factory and hey, here's the factory class. And now you can do, you know, product colon colon factory create, and that'll get a snapshot or call the API, save that somewhere.

Andy Hinkle (27:55)
Mm

Mm -hmm man so many great ideas. Yeah, come on wheels turning. I love it. Yeah Yeah excited to hear that from North Meets south probably I'll see what they I think that show is gonna come up in and I'll probably reach out to Jake about this like idea or just the maybe even Jason to about this idea of maybe utilizing some factory patterns and Nuno in Jason's tweet Jason Beggs his tweet

Dalton McCleery (28:17)
Write that down. Write that down.

Andy Hinkle (28:39)
He mentioned, Nuno that he originally, or he wrote this feature, or he did a lot of work into it. So you mentioned snapshot testing. He wrote that in the past. Maybe there's some potential there. Maybe the, the Laravel team has something in store. And so it's a, a unique concept that, that can be utilized more. And I'm sure Taylor's he's in the middle of cloud and he probably sees this too of being a possible thing. So yeah, I think it'll be really good for, for the community.

Dalton McCleery (29:05)
Yeah, there's definitely some opportunities for third party APIs not being a hassle or taking time. Not that most of them do, but you know what mean? There's potential here.

Andy Hinkle (29:12)
Mm

Yeah. Yeah, for sure.

Cool. Yeah. So what not had sure how to transition here. I did want to talk about Aaron Francis new Postgres course. And we're pretty stoked about that. just being able to learn Postgres and it's coming at a perfect time. I feel like just with Laravel cloud saying they're going to use Postgres by default. can you can you can bring your own driver if you want to. But that is what they're going to have as default. And it's

Dalton McCleery (29:40)
by default.

Andy Hinkle (29:47)
very exciting stuff. talked about the show on the show before with pros and cons of Pro -Sgress, but the trailer was incredible.

Dalton McCleery (29:55)
That's what I thought. was like, how? did that? Aaron doesn't, I mean, don't get me wrong, Aaron's great. I was like, I don't see how Aaron was like, this is like cinematic and like legit, you know what I mean? Like if I tried to make that, it could be on my iPhone, know, cats in the background or something, you know what I mean? But like that was, that was nice. I watched it probably twice.

Andy Hinkle (30:09)
Yeah.

Here you go.

Yeah, gave you goosebumps. Yeah, I did too. Yeah, his, do you know his office? I don't know if you realize, but it's like an apartment building where people are living. Did you see that? But so he mentioned on his show before like in a co -working space, it was just too expensive. So we found, so he started working with apartments and we got a good deal. And so, which is actually at his previous employer. I think that's where he first set it up

Dalton McCleery (30:31)
Yeah

Andy Hinkle (30:50)
it was really cool just seeing that. And if that's just the trailer, I can only imagine how great the content is. I immediately shared it with all of my coworkers. I'm like, guys, you guys want to learn Postgres? And a lot of people are excited. So we're definitely going to buy that course.

Dalton McCleery (30:59)
Mm -hmm.

Andy Hinkle (31:05)
I'm probably going to be a day one. Depending on how, if I can, I'm probably going to watch it as soon as I can. So, very excited for it.

Dalton McCleery (31:12)
You know, go pull an all nighter, binge it all. You'll be a Postgres Master by the morning. Thanks to Aaron Francis.

Andy Hinkle (31:14)
Yeah. Yeah, it's exciting. Postgres. Yeah. Postgres is just because it's been so, such a big topic on Laravel. Just a few months ago, SQLite, just by with testing and what's always been, you know, SQLite has been always kind of the king in testing, but now it's, Pinkery is running with SQLite. So it's just, it's kind of, it's just so cool to see Laravel expanding more than just MySQL. If you look at any surveys, it's just like MySQL is number one and

Now it's kind of neat seeing all these other database providers. Jess Archer talked about ClickHouse at Laracon but seeing all these different providers and services for data collecting and just how much we're really just stretching and just kind of filling out these other services to see if it works for Laravel developers. So that's really cool.

Dalton McCleery (32:05)
Yeah, you can never go wrong with too many, well you can go wrong with too many options, but options is great. And I feel like MySQL has just been the de facto, and now that sort of Postgres is poking its head out. I kind of like some options. I even had the option to sort of, well, I'll tell you about it in a sec when we talk about DigitalOcean and sort of that MySQL versus Postgres. I picked MySQL, but I really wanted to pick Postgres, but.

Andy Hinkle (32:14)
Mm

Dalton McCleery (32:35)
I don't know enough about it yet. I'm going to need a course to help me, you know, to walk me through doing it before I commit to like a whole production environment to it. So I'm, I'm, I am really hoping that our agency buys it Cause I will, I'm to pull up an all nighter on that thing. I want to learn about it, especially if it's going to be as high quality as the trailer from Aaron Francis signed me up,

Andy Hinkle (32:39)
Yeah.

Yeah.

yeah.

the you mentioned that there's having lots of options and stuff like that. But what I like most is like because there's been other platforms I've been on, other frameworks and languages where they're like, you can use this or use this or use this. Laravel's like,

here's what we're going to use by default. But if you want to do something different, totally cool. And so and here's all these different great options. And so I love that they're being diverse, but also direct into what they recommend. So it's pretty cool.

Dalton McCleery (33:26)
Aaron Francis could not have timed that Postgres announcement course any better. He had what known, right? He's got insider information. Hey, Laravel Cloud is gonna come with Postgres by default and I could see just Aaron Francis just writing down Postgres course, emailing somebody to buy the domain for his course. Perfect timing.

Andy Hinkle (33:29)
No. Just... Yeah. Yeah, yeah.

Yeah.

He is the king of databases, you he worked at the database provider company that we will not speak of, you know, doing that for a while. And then he did SQLite course. And so he's just so good at databases and teaching people how they work. so couldn't pick a better person to learn from. So for sure. And honestly, if you'd like picked anything.

I would just like I'm a huge fan of Aaron of like just anything he does. He does it really well.

Dalton McCleery (34:11)
Yeah, Aaron, so if you ever make a course on like C sharp or something like that, I guess we're gonna buy. Just by default, I'll learn.

Andy Hinkle (34:16)
yeah.

So what, okay, so question for you. If, okay, Aaron does a course that's not about databases and what would be your top pick of like, if he reached out over Twitter and said, hey guys, I wanna do something different from databases, what would you tell him?

Dalton McCleery (34:37)
If I could pick anything, and I know that they do a show called Mostly Technical, so I want to pick something that's sort of not technical, I want to know how they shot and filmed and how he sort of organizes video production. Like, because if his courses look great, his trailers look great, like, how are you organizing that? How do you have a shot list? I want to know, like, video production from Aaron. If I had to pick anything, I want to know video production.

Andy Hinkle (34:52)
So more philosophical, yeah, or background.

Yeah, yeah, that'd be. Yeah. Yeah, kind of like Jack McDade style where Jack McDade did a radical design course. He talks about how he does design. I would love to see Aaron like do a course on like how he works, how he how what his thought process on what how he likes to bring things to market. He has some really good Twitter hacks. He's really good on Twitter. I figuring out how to work a list on or how to.

Basically how to run a SAS would be a like a good course like how to how to fully develop a SAS and if it was more of a technical side I think I would just love to hear something of You know, maybe Another like layercast course or something that he could do. I feel like he's done. Maybe he's done some layercast course I believe he but just something to that effect of anything He does is just top -notch

Dalton McCleery (35:59)
That's what happens when you're so likeable. That's the other topic. Aaron, tell me how to be so likeable. Because I don't like talking to people. I don't like social interactions. Tell me how to be likeable and how do you set up your shots because I want to do that. Because that's all.

Andy Hinkle (36:02)
Yeah, it's good human.

Ha ha ha.

Yeah, for sure. Yeah. It's all just about being a good human and being friendly. and being being what does he say being folksy being folksy?

Dalton McCleery (36:22)
That's true, and he is a great human.

We probably have a Midwest saying for being folksy around here, but it's probably derogatory and probably shouldn't say it. If you know what I mean. Poor guy.

Andy Hinkle (36:32)
Yeah. Right. Yeah. Yeah. So, yeah, you mentioned DigitalOcean. So DigitalOcean announced their partnering with Laravel. And, when I saw it, I went to their website, like to their blog to see if they had a blog post, because it was just like a tweet and they mentioned Forage in there. And I thought that was like, okay, that's pretty cool. And then I went to the website, to the blog, like, maybe they're announcing like a big partnership of some, some effect.

Dalton McCleery (36:51)
Yeah, that's it.

Andy Hinkle (37:00)
Didn't see anything so I was like, okay, what does this mean? And I like, don't know if it's easier connection and forge or cuz they did specifically mention forge But did you see any of this?

Dalton McCleery (37:10)
I did, and it's weird, of, they just sort of tweeted it out in the ether, I guess trying to ride some of the coattails of the 57 million funding that Laravel got. Did it all, it's like, hey, by the way, we work better with Forge now. I saw something that they were like, yeah, it's faster now, whenever you deploy, or whenever you create a server or a site, or a droplet, I guess is what they call it, droplet.

Andy Hinkle (37:21)
Mm -hmm.

Mm

Dalton McCleery (37:37)
from Forge to DigitalOcean, it's supposed to be faster. And my Project X is coming up, so was like, well, Laravel Cloud's not available yet, so I'm gonna put it on Forge for now. And I was like, I guess I'm gonna try out this, see how fast it is. And ironically, I had tested this for our agency. We try to have some backup sites just in case a site goes down. And we use DigitalOcean and Forge to sort of, hey, we'll just spin up this site real quick.

Andy Hinkle (37:38)
Right.

Dalton McCleery (38:06)
and actually did some testing on how long it takes to build from cold, like a full server. I think it's like 15 minutes, 17 minutes, something like that. I wish I would have tested it this time when I set it up because it is noticeably faster this time. I don't know sort of what they did or how they did it, but I felt like I was ready in like seven minutes. from, here's my new DigitalOcean account. Went to Forge, create a server, click it.

Andy Hinkle (38:28)
Wow

Dalton McCleery (38:34)
It was like five or six minutes and I was putting in my details for my site. I don't know how they did that. I mean, it's just SSHing into that server, I assume, and running some setup commands, but it is faster. I don't know if it's like, know, hey, Laravel Cloud in less than a minute. You know, it's not that fast, but it is faster. I don't know what else is different about it, but I was kind of happy about it. Like, hey, I'll take faster stuff. Again, going back to

Andy Hinkle (38:38)
Yeah.

Mm -hmm.

Dalton McCleery (39:03)
I don't want to waste my time. If have to sit here for 20 minutes while you provision a server for me, then I'll go do something else, I guess. But yeah, was less than 10 minutes for sure.

Andy Hinkle (39:14)
something I've been thinking about is if there's partnership in some ways means like you mentioned faster service. because with the droplets, I don't know if they have something where they partnered with Laravel, how they have them on demand and ready, which would be kind of a cool concept. So think of like when you you pull in your digital ocean details and you provide what kind of server you want.

and they just have all these ones that they have like maybe 10 boxes that are just or droplets that are preloaded. And so when you select all these options, you hit save and that partnership was like, okay, this customer wants this, this droplet, this type of droplet. got one ready to go and that's what could be in it's all set up and ready to roll. That's kind of an interesting concept. I believe that's somewhat of what Laravel cloud is sort of going into. Like they're going to have these things ready to go for you.

but obviously it's an AWS, a whole different ecosystem, et cetera, but that does kind of where my head space was going. And so when you said that maybe it's faster than that, but it could just be Forge enhancements too, since they added 20 employees, it could be something like that. so yeah.

Dalton McCleery (40:11)
That's a good thought.

Yeah, that sounds like a great idea actually because I think there's only like four or five options of server configurations you could pick and forge. So like I will just optimize for these five, you know, these five options. Say, I want a full server. Okay, well sort of here's like a, hey, going back to that snapshot. Here's like a snapshot of a server that's pretty much already ready. Over here, run the setup commands faster. I was trying to find a tweet and it said it's quote unquote 50 % faster.

Andy Hinkle (40:26)
Yeah.

Yeah.

Dalton McCleery (40:50)
I know if it's, well I guess by my numbers, if it's 15 minutes and it's now seven minutes, it is 50 % faster. So I don't know how they did it.

Andy Hinkle (40:51)
Hmm.

Yeah, it'd be, it'd be really, yeah. It's like, yeah. And you mentioned working here at Gray Loon our agency, we have, you know, we've been in situations where we use AWS or we use a different provider and the client is interested in having a quick backup solution or something ready. we, and we've invested a lot of time and effort into that, but if we can, but now partner with digital ocean and say, Hey, we just have it ready to go and have these droplets right at, you know,

go out of just a click of a button and it's there. That just, that sounds so nice. And it sounds like maybe that's where the partnership is going. Like I said, they probably, the biggest thing with the Digital Ocean and their droplets is the size. So I imagine it's probably like the, maybe the lowest size or second to lowest or something. And then what, depending on what size they build, maybe they just resize it and then get handed over. And because I feel like that, that's where it can, there are options that can be wildly crazy is like when you start

changing all the different sizes and expensive as well. But it's really neat. I feel like maybe they can do this more with some other providers, but it's really cool to see DigitalOcean kind of step up and do that. And I feel like anyone that works with Forge, anyone's like, what should I use? And I tell everyone DigitalOcean, you'll have no issues.

I do some stuff on the side. I don't really make anything from it just for like my church and then just for people. And I've put them on digital ocean and it's been probably 10 years now. I've never had a problem ever. There's been like maybe once in a thing and it was because of an upgrade or something, but purely entirely my fault. But as far as like downtime from a provider, it rarely ever happens with digital ocean. So yeah, they're great to work with.

Dalton McCleery (42:38)
real though. I mean we have, we used to have like three or four hosting providers that we did that we used at our agency and now we've sort of narrowed it down to just three and no offense to the other ones I'm not gonna name drop them or anything but we have like an uptime channel in Slack so whenever a site goes down it'll you know post a message there and I don't think in the last like three or four years that we've been using Forge I don't think I've seen a message from any of those sites.

Andy Hinkle (42:46)
yeah.

Ugh.

Yeah.

Nothing. Yeah. Yeah. All the other services.

Dalton McCleery (43:07)
it's pretty much all the other sites that are hosted in blank hosting provider here they go down quite a lot and their services are not service their supports not that great and we pay for support a lot.

Andy Hinkle (43:14)
Yeah. Right.

Yeah, it's great not to worry about servers. Yeah. And that one year you're talking about, yeah, working with them was just a complete nightmare. now anything I feel like, I don't know if you feel this way, but I feel like all our apps now they're either on DigitalOcean or they're on AWS, either one or the other. And so, is, are you feeling that way too? I mean, I, I haven't, the other provider, I haven't worked with them in years. So.

Dalton McCleery (43:40)
Yeah.

Consider yourself lucky. I still have some sites that I can't migrate. They're already built. Just I can't migrate them over. I think so, yeah. Most of them are on Forge now, other than like our WordPress sites are on WordPress Engine. I mean, I don't mind to name drop them. They're fine. But they're not as bad as... no. I try not to read anything with WordPress in it.

Andy Hinkle (43:47)
It's been kind of nice. Okay, okay, maybe, yeah.

Okay.

Yeah. But if...

Yeah, Man, yeah, we're present. Jen has some drama going on Did you read that? The creator he's like, okay. Yeah, I'm gonna go to off -topic but the creator of WordPress or he was like one of the founding guys he like came out and like Dogged on WP engine and said that they're just all for profit and not for WordPress and that they have been had they haven't been doing anything for WordPress and it's been a hot topic past couple days, so I'm like shoot

That's it's hard. Yeah, but this, he also runs his own kind of hosting thing. So I can kind of see it from that angle, but yeah, it was kind of some, some, big hot take and he did it out of conference. He like did it on stage, called them out. It was, yeah, was wild. Anyway. Yeah. Yeah. Read up on it. Yeah. It's a, yeah, you can Google it. It's if you Google it's everywhere, but, but yeah, digital ocean, man, they

Dalton McCleery (44:32)
did not hear about this.

Hmm. in front of people.

Ooh, spicy.

Mmm, am I

Andy Hinkle (44:58)
Powerhouse, they're great to work with. But honestly, when cloud comes out, just, like I said, the less we have to worry about servers, like we use DigitalOcean right now or AWS. If AWS is down, the entire internet's down. you know, if we have a, when our client is down, which only happened once in in all I can remember, and it was actually, I think it was early this year when AWS they had a lot of services go down.

Dalton McCleery (44:59)
plus one.

Yeah.

cares.

Andy Hinkle (45:20)
And the whole internet was practically having issues and it was all over the news, you know? And so, if yeah, in digital ocean's been so great to us, knock on wood. so yeah, highly recommend them. Cool man, so good to see that partnership. So last thing we'll talk about was the foodie battle. Did you see that? How awesome that was?

Dalton McCleery (45:23)
Thank

For now.

And yeah, you sent it to me, like, watch this right now. I was like, okay. And I did, and it's insanity what they were able to do that fast. Maybe you'll do a better job explaining what it's supposed to be, because I don't know anything about these guys. John.

Andy Hinkle (45:46)
Yeah.

Yeah.

Yeah, just a... Okay, yeah, I'll talk a little, yeah, so, because we're not getting any context here, so this is great, great, great content, right? Yeah, so, there's this thing. There's a YouTube channel and it's called the Web Dev Challenge, IRL, or just Web Dev Challenge. And so, it's fairly new. It started two months ago and they built like a chat bot.

Dalton McCleery (46:13)
Read our minds. This is what we're talking about.

Andy Hinkle (46:29)
it was really cool. So what they do is they bring in all these developers from different companies. They're mostly in the I would say exclusively actually in the JavaScript space. They they're writing in. Yeah, they're writing Nuxt and or next in just different React apps and stuff when they do these demos. But they'll be like they'll bring in people from this most recent when they brought in somebody from Vercel developer and Maybe a freelancer is well known or something.

Dalton McCleery (46:38)
Hotch up.

Andy Hinkle (46:55)
But they do a challenge of building the best app. it's like, you know, just like, it's so neat of how they come together and do this. And it's they do out of Portland. So they all come down, they're all in person.

they have five different episodes, I think. And the most recent episode was Build an app to help the local food scene. And so there are four developers, they all build an app and there's a guy I just kind of briefly mentioned him like when he was actually like talking about people from Vercel

He is one of the design engineers at Vercel His name is John Famous. So it's P -H -A -O -U -S. That's a killer last name, by the way. If that really is his name, yeah. Or it's Famous. Famous? Maybe like Famous. I don't know. But anyway, I'm just going to say Famous because that's pretty sick. Yeah. But he did he did an app and it was like

Dalton McCleery (47:37)
For real.

That's the Midwest pronunciation right there.

Andy Hinkle (47:56)
He built it like four different games. you could spin your phone around. Like it was all mobile apps. can use a number of times you rotate your phone. But the idea was that, This is in Portland. And so they look up, they have all these APIs, look up like Google places and look up all their, you know, bring in all these locations. And the guy would, they would have like,

the app that he had, everyone would join. Like you would have four different mobile phones they would join and you would spin your phone around and then the winner would pick the restaurant. Or there was other ones like an Oregon Trails, another developer, she wrote like an Oregon Trail, which got me to thinking like, Dalton, this is when I send it to you, I was like, Dalton, you gotta see this. So when several years ago, when Dalton and I first met, we...

Dalton McCleery (48:36)
Mm

Andy Hinkle (48:43)
We're working at a different company together and both of us were just like, we need something different. and so we were kind of teaming up just for both of us to get a new job or something different. And so we're like, we actually both got interviews at the same place and we're thinking like all of the work we had because they, they wanted to see something we did. They said it would be highly recommended and we're like, what could we build? That would be fun. And so.

Dalton McCleery (49:04)
Mm

Andy Hinkle (49:09)
We built an app it was a Laravel app and we did it on all the local food locations you remember that and It was called it was called quiz knows which quiz knows used to be like a sub place Do they have quiz knows here like that? You don't talk about right? Or is that okay being from Oklahoma that there I think they're defunct now. I Think they're not around. Yeah It's like a it's like a subway

Dalton McCleery (49:17)
Mm

with snows.

Bye.

I know that I think they are defunct. I have heard of a Quiznos. are like, are, ooh no, there are three Quiznos in my city and all of them say permanent, permanently closed. So I don't think there are any.

Andy Hinkle (49:43)
Okay. Yeah. Okay. Okay. But it was for a while. It was a popular, was popular chain here. And I'll just make it sure it wasn't an Oklahoma thing. Yeah. cause I've been from Oklahoma that we have like things like Del Rancho and just really Southern stuff. Yeah. Yeah. Yeah. Right. Yeah. So anyway, we built an app that was called quiz knows, but it was spelled like, like you're doing a quiz or Q I Z and then knows was like you.

Dalton McCleery (49:51)
Yeah, subway alternative.

Yeah, never heard of a Del Rey joke.

Andy Hinkle (50:11)
like a not acknowledgement. and so quiz knows and we we did something very similar but we did so we pulled in all the restaurants and but we did weights depending on like their answers. It was just like a questionnaire and what were some of the questions. Do you remember?

Dalton McCleery (50:12)
You know.

I'm actually, I pulled up the repository from where it is and we built this thing six years ago is how old this thing is. And we built it in Vue This was back before inertia was a thing. So it's just like raw Vue files in the views. I'm trying to find where the questions are.

Andy Hinkle (50:44)
Yeah, it's nostalgic.

so some of the questions we would ask you the weighted questions It would be like do you want to dine in or carry out? And then the next question and these are I think the questions are all randomized and we would just weight depending on So it would be like do you want a salad or french fries with that? So I think I think we weighed that by like fast food or like sit down.

Dalton McCleery (51:09)
It was really clever.

Andy Hinkle (51:14)
It wasn't truly like, was definitely opinionated by us. was like, you know, like what we'd see. Yeah. Like another one was like, you're, you're, stranded on a desert Island. Pick one item. Here's the items. Fishing net or giant box and matches or cold beer ice cream. Pick one item. So I guess, you know, if we did fishing net, maybe, something seafood, this ridiculous stuff, right?

Dalton McCleery (51:18)
for sure.

So what else is?

you

It's like a seafood restaurant.

This was a great little app.

Andy Hinkle (51:43)
Another question says, what kind of atmosphere do you prefer? My living room? Outdoor seating? The kind I can breathe? I don't even know where we're going with that. The kind I can breathe. Or dimly lit dungeons?

Dalton McCleery (51:55)
I most of these answers, when we worked at that other agency place, there was three of us in that room. It was you, me, and then we had another guy with us, Sam, Sam Cuban. And I think he was, we posted these questions for him and he'd come up with the craziest, I think some of these responses are Sam responses. Like, hey, we need a question for alcohol. How do we ask somebody if they wanna drink alcohol?

Andy Hinkle (52:04)
Yeah.

Sam, yeah, love Sam.

Yeah. Yeah.

Dalton McCleery (52:22)
And I think Sam came up with the answers of, yes please, hard liquor, water only, and then fruity drinks. That just screams Sam to me.

Andy Hinkle (52:30)
Yeah. Well, this one does for me too. This is the great Sam example. It says, in terms of spicy, how much of our wimp are you? It says newborn, mild, like in parentheses. Toddler, medium. Adult, hot. The final answer, independent woman who don't need no man, open flame.

Dalton McCleery (52:40)
Hahaha!

Yeah, I mean that has to come from there.

Andy Hinkle (52:56)
That is...

The fact that we showed these questions in an interview just makes it all, yeah, because of this app, we got our job. This is a good story of like, know, sharing stuff like this. But with that web dev challenge, when I saw this, like, don't, you've got to see this. They came up with much better ideas. Ours were just all like, you would answer the question and would, depending on the weight of the result, would display the result, like the local restaurant.

Dalton McCleery (53:02)
Bro, we got the job. We're here because of this app.

Is this public?

Andy Hinkle (53:25)
But these things were so cool, like an Organ trail game, was kind of similar to what we did of, you know, going upon your quest to find your restaurant, but then there was the other one, like you could spend your phone. That'd be so cool. And I was kind of thinking like, if I wanted to do an, like a fun app in the future, just

Dalton McCleery (53:35)
That is why.

Andy Hinkle (53:40)
I've been really wanting to try the reverb package by Laravel and that would be like a fun way to, you know, just kind of test that you can get people to connect and maybe scroll on the phone and the word, spin, you know, do the whole spin thing like they did in the videos or just something fun to kind of play those web sockets, but kind of got my wheels turning a bit kind of cool to revitalize or bring that app back from probably Laravel it was 2018. So Laravel five, four.

Dalton McCleery (53:47)
Thank you.

Andy Hinkle (54:07)
Or six somewhere in there. Yeah. So is it five, six? Yeah. man. Back before like the factories, the changed factories. What else is in five? We don't have components, right? Like components, I think was the one of the best features that come to Laravel in recent years. I can't.

Dalton McCleery (54:10)
If I five six, five six.

this, yeah, this, apps, it's, it's kind of hard on the eyes. I don't know if you have this public, you should definitely make it public because it's, it's fun definitely to read it. And, Sam's Sam was a designer for sure. And the logo is great. I even think we had like a social media. I think we had social media for it at some point and, and, and one of the restaurants like retweeted something that we did cause Sam was friends with that restaurant or something.

Andy Hinkle (54:32)
Yeah! yeah.

I'll link it in the show notes.

Mm

We did, we had a Twitter account. Yeah. Yeah.

Yeah, it was like a very popular they're like all across the United States now. It's very popular restaurant chain called a zip, which is pizza backwards. Yeah, which I thought was crazy that they retweeted it. So it's just it's just a fun little project for sure. I love that. But yeah, it got me thinking nostalgic and I was like, maybe I could do that again with a WebSocket. So just something fun and doing while I have this time, because I have yet to work with in actually like a professional.

Dalton McCleery (55:03)
Easy.

Yeah.

the knowledge.

Andy Hinkle (55:24)
I've worked with web web sockets just on the side and this will be another side project with web sockets, but I'm waiting to get my, I'm really excited about one day I'll get actual project that needs web sockets. So one of the few pro one of the few packages I haven't worked in at Laravel. So yeah, be fun. It'd be fun to get my feet wet.

Dalton McCleery (55:37)
Yeah, we should.

Reverb? Huh. Yeah, I haven't worked in reverb specific. I've done WebSockets for some freelance stuff. There was like a WordPress connector thing and they had to pull in WordPress stuff. Long story. But yeah, if this isn't public.

Andy Hinkle (55:56)
Well, it was bleeping in my ears when you said the WP word. Beep.

Dalton McCleery (56:00)
Yeah, I tuned out of myself when I said wordpress. I don't even know where I would go with it. If this isn't public, definitely make it public this repository and hell make another branch and just start reworking this thing. We'll have midwest quiz knows just opinionated by two midwest boys with our taste preferences because honestly I'm I am when it comes to like the spite that spice level question I am a newborn. I cannot I cannot do spicy. I am not an independent woman.

Andy Hinkle (56:15)
Midwest quiz, all the Midwest restaurants. This time would be some be some fun games.

Dalton McCleery (56:30)
And I do need a man. Don't quote that.

Andy Hinkle (56:30)
Hahaha

I a little bit of spice, enough for me to continue to enjoy my food. I definitely, I tried the Carolina Reaper once and my gosh, was just when I got it, was with some wings and they brought milk with it. And I was thinking, you know, that milk is usually used to eliminate spices and stuff. was thinking, you know, was just like, this is gonna be bad. But then I got peer pressure and tried it and I felt my mouth.

Dalton McCleery (57:03)
Yeah, especially when they like bring stuff to you and they're wearing gloves. They're like, here's an extra pair of gloves for you. Give me the check. I'm leaving. I'm not eating any of that stuff because I don't want to die. I'm a mild boy.

Andy Hinkle (57:07)
Mm.

Mm -hmm my 21st birthday my 21st birthday. did the blazing wing challenge Buffalo all wings and Yeah, I did not drink that night so because I was I was in I was close to the I was close to a bathroom The entire evening and not for when I when I tell people I was I was close to a bathroom on my 21st birthday they think it was from drinking. I is from the blazing wing challenge up

Dalton McCleery (57:25)
Hahaha, yuck.

You are worshipping the porcelain throne.

Andy Hinkle (57:43)
Buffalo Wild Wings. So in here in America that we have this restaurant, people , listeners. I'm sure people know about Buffalo Wild Wings. If you watch sports, it's on every freaking commercial, but Buffalo Wild Wings, it's a very popular like chain for wings and sports. They have a hundred TVs in there, but they do this challenge. They call it the Blazing Wing Challenge. They bring out, it's just their sauce of Blazing Wings and you can't take a drink. So you don't have a drink or anything with it. You get 12 wings and you have.

Dalton McCleery (57:54)
Be dubs.

Andy Hinkle (58:12)
man, it's been 10 years since I've done it, but I think it was like six minutes to eat them all. And so I did it. I was I was definitely with the underpreer. Yeah, there was 10 people with me. So I was like, got to do this. There was like sauce all over my face. My eyes were burning because I had I had sauce in my eyes. That was part of the worst part, because I don't know how I got sauce. I think it was just because I did something like this. And, know, because you have it on your fingers. it was rough. So.

Dalton McCleery (58:20)
Wait, you finished it?

No way.

no.

Andy Hinkle (58:40)
And so yeah, I got through it. got a shirt. I got Blazing Windchallenge shirt. It was pretty cool. Yeah, it's just, but you don't get, you still have to pay for the wings, which was for my birthday. So people did pay for it. But yeah, it was just this thing they offer. Of course I get peer pressured into doing it. Like you've got to do this. Like for your birthday, you got to go all out. Like, okay, here we go. It was good. It was a time.

Dalton McCleery (58:42)
Ugh.

boy.

What? Come on.

Well maybe for maybe for your next birthday instead of doing the blazing ring challenge we'll go do another form of torture and you can get your Laravel tattoo Yeah, exactly don't say anything I just I'm hitting I'm in the 30s now too and I don't That makes me feel

Andy Hinkle (59:13)
I'm not real tired too. Maybe if I turn 40. Which is 8 years away. Yeah, be good.

man, yeah, someone shared something earlier about like it being closer to like your closer amount of like 40 than you were to like, you know, 21 or something. I forget the exact name, but just it made me feel like super old, like man, we're getting up there. Great. Yeah. Yeah. Yeah. So.

Dalton McCleery (59:39)
Get those crow's feet eyes. They're gonna start coming in soon. Alright, let's off the old top. I don't wanna feel old. I already feel old. My knees suck.

Andy Hinkle (59:46)
All right, yeah, all right man, it's been good should we wrap it All right, yeah awesome man, you've been listening to another episode of the Midwest artisan You can find us on social media and all the different types of social media wherever they can be found If you like the show give us a shout or just reach out if you've been listening this far, we're sorry or Thank you. I don't know

Dalton McCleery (59:52)
Let's wrap it here.

Thank you. I guess.

Andy Hinkle (1:00:16)
But thanks for listening and we'll see you next time. Peace.